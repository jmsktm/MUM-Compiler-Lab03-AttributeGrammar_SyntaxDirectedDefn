/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexer;

import java.io.*;
import node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.NORMAL;

    private IPushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") final PushbackReader in)
    {
        this.in = new IPushbackReader() {

            private PushbackReader pushbackReader = in;
            
            @Override
            public void unread(int c) throws IOException {
                pushbackReader.unread(c);
            }
            
            @Override
            public int read() throws IOException {
                return pushbackReader.read();
            }
        };
    }
 
    public Lexer(@SuppressWarnings("hiding") IPushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.SL_COMMENT; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            new InvalidToken(this.text.substring(0, 1), start_line + 1, start_pos + 1),
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhiteSpace(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSingleLineStart(line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSlCommentEnd(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemicolon(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLParen(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRParen(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBrack(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBrack(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLCurly(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRCurly(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNewScope(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEndScope(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLookup1(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLookup2(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBoolean(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TChar(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFloat(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInt(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVoid(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TString(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKclass(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMethod(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVariable(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNewBlock(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEnclosingMethod(line, pos); }
    Token new27(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPrintSymtab(line, pos); }
    Token new28(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdent(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // NORMAL
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {40, 40, 6}, {41, 41, 7}, {44, 44, 8}, {46, 46, 9}, {47, 47, 10}, {59, 59, 11}, {65, 90, 12}, {91, 91, 13}, {93, 93, 14}, {95, 95, 15}, {97, 97, 16}, {98, 98, 17}, {99, 99, 18}, {100, 100, 16}, {101, 101, 19}, {102, 102, 20}, {103, 104, 16}, {105, 105, 21}, {106, 107, 16}, {108, 108, 22}, {109, 109, 23}, {110, 110, 24}, {111, 111, 16}, {112, 112, 25}, {113, 114, 16}, {115, 115, 26}, {116, 117, 16}, {118, 118, 27}, {119, 122, 16}, {123, 123, 28}, {125, 125, 29}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 30}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {},
            {},
            {},
            {},
            {{47, 47, 31}, },
            {},
            {{48, 57, 32}, {65, 90, 33}, {95, 95, 34}, {97, 122, 35}, },
            {},
            {},
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 95, -14}, {97, 110, 35}, {111, 111, 36}, {112, 122, 35}, },
            {{48, 95, -14}, {97, 103, 35}, {104, 104, 37}, {105, 107, 35}, {108, 108, 38}, {109, 122, 35}, },
            {{48, 95, -14}, {97, 109, 35}, {110, 110, 39}, {111, 122, 35}, },
            {{48, 95, -14}, {97, 107, 35}, {108, 108, 40}, {109, 122, 35}, },
            {{48, 109, -21}, {110, 110, 41}, {111, 122, 35}, },
            {{48, 110, -19}, {111, 111, 42}, {112, 122, 35}, },
            {{48, 95, -14}, {97, 100, 35}, {101, 101, 43}, {102, 122, 35}, },
            {{48, 100, -25}, {101, 101, 44}, {102, 122, 35}, },
            {{48, 95, -14}, {97, 113, 35}, {114, 114, 45}, {115, 122, 35}, },
            {{48, 95, -14}, {97, 115, 35}, {116, 116, 46}, {117, 122, 35}, },
            {{48, 95, -14}, {97, 97, 47}, {98, 110, 35}, {111, 111, 48}, {112, 122, 35}, },
            {},
            {},
            {{9, 32, -2}, },
            {},
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 110, -19}, {111, 111, 49}, {112, 122, 35}, },
            {{48, 95, -14}, {97, 97, 50}, {98, 122, 35}, },
            {{48, 95, -14}, {97, 97, 51}, {98, 122, 35}, },
            {{48, 95, -14}, {97, 98, 35}, {99, 99, 52}, {100, 100, 53}, {101, 122, 35}, },
            {{48, 110, -19}, {111, 111, 54}, {112, 122, 35}, },
            {{48, 115, -28}, {116, 116, 55}, {117, 122, 35}, },
            {{48, 110, -19}, {111, 111, 56}, {112, 122, 35}, },
            {{48, 115, -28}, {116, 116, 57}, {117, 122, 35}, },
            {{48, 95, -14}, {97, 118, 35}, {119, 119, 58}, {120, 122, 35}, },
            {{48, 95, -14}, {97, 104, 35}, {105, 105, 59}, {106, 122, 35}, },
            {{48, 113, -27}, {114, 114, 60}, {115, 122, 35}, },
            {{48, 113, -27}, {114, 114, 61}, {115, 122, 35}, },
            {{48, 104, -47}, {105, 105, 62}, {106, 122, 35}, },
            {{48, 107, -22}, {108, 108, 63}, {109, 122, 35}, },
            {{48, 113, -27}, {114, 114, 64}, {115, 122, 35}, },
            {{48, 95, -14}, {97, 114, 35}, {115, 115, 65}, {116, 122, 35}, },
            {{48, 107, -22}, {108, 108, 66}, {109, 122, 35}, },
            {{48, 90, -14}, {95, 95, 67}, {97, 122, 35}, },
            {{48, 95, -14}, {97, 97, 68}, {98, 122, 35}, },
            {{48, 122, -14}, },
            {{48, 95, -14}, {97, 106, 35}, {107, 107, 69}, {108, 122, 35}, },
            {{48, 103, -20}, {104, 104, 70}, {105, 122, 35}, },
            {{48, 90, -14}, {95, 95, 71}, {97, 122, 35}, },
            {{48, 109, -21}, {110, 110, 72}, {111, 122, 35}, },
            {{48, 104, -47}, {105, 105, 73}, {106, 122, 35}, },
            {{48, 104, -47}, {105, 105, 74}, {106, 122, 35}, },
            {{48, 95, -14}, {97, 99, 35}, {100, 100, 75}, {101, 122, 35}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 114, -53}, {115, 115, 76}, {116, 122, 35}, },
            {{48, 110, -19}, {111, 111, 77}, {112, 122, 35}, },
            {{48, 114, -53}, {115, 115, 78}, {116, 122, 35}, },
            {{48, 115, -28}, {116, 116, 79}, {117, 122, 35}, },
            {{48, 95, -14}, {97, 116, 35}, {117, 117, 80}, {118, 122, 35}, },
            {{48, 110, -19}, {111, 111, 81}, {112, 122, 35}, },
            {{48, 95, -14}, {97, 97, 35}, {98, 98, 82}, {99, 114, 35}, {115, 115, 83}, {116, 122, 35}, },
            {{48, 115, -28}, {116, 116, 84}, {117, 122, 35}, },
            {{48, 109, -21}, {110, 110, 85}, {111, 122, 35}, },
            {{48, 95, -14}, {97, 97, 86}, {98, 122, 35}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 114, -53}, {115, 115, 87}, {116, 122, 35}, },
            {{48, 98, -41}, {99, 99, 88}, {100, 122, 35}, },
            {{48, 122, -14}, },
            {{48, 95, -14}, {97, 111, 35}, {112, 112, 89}, {113, 122, 35}, },
            {{48, 99, -64}, {100, 100, 90}, {101, 122, 35}, },
            {{48, 107, -22}, {108, 108, 91}, {109, 122, 35}, },
            {{48, 98, -41}, {99, 99, 92}, {100, 122, 35}, },
            {{48, 90, -14}, {95, 95, 93}, {97, 122, 35}, },
            {{48, 95, -14}, {97, 102, 35}, {103, 103, 94}, {104, 122, 35}, },
            {{48, 97, -73}, {98, 98, 95}, {99, 122, 35}, },
            {{48, 104, -47}, {105, 105, 96}, {106, 122, 35}, },
            {{48, 110, -19}, {111, 111, 97}, {112, 122, 35}, },
            {{48, 48, 32}, {49, 49, 98}, {50, 50, 99}, {51, 57, 32}, {65, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 110, -19}, {111, 111, 100}, {112, 122, 35}, },
            {{48, 110, -19}, {111, 111, 101}, {112, 122, 35}, },
            {{48, 114, -53}, {115, 115, 102}, {116, 122, 35}, },
            {{48, 122, -14}, },
            {{48, 107, -22}, {108, 108, 103}, {109, 122, 35}, },
            {{48, 109, -21}, {110, 110, 104}, {111, 122, 35}, },
            {{48, 111, -82}, {112, 112, 105}, {113, 122, 35}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 98, -41}, {99, 99, 106}, {100, 122, 35}, },
            {{48, 111, -82}, {112, 112, 107}, {113, 122, 35}, },
            {{48, 95, -14}, {97, 120, 35}, {121, 121, 108}, {122, 122, 35}, },
            {{48, 100, -25}, {101, 101, 109}, {102, 122, 35}, },
            {{48, 102, -87}, {103, 103, 110}, {104, 122, 35}, },
            {{48, 100, -25}, {101, 101, 111}, {102, 122, 35}, },
            {{48, 106, -58}, {107, 107, 112}, {108, 122, 35}, },
            {{48, 100, -25}, {101, 101, 113}, {102, 122, 35}, },
            {{48, 95, -14}, {97, 108, 35}, {109, 109, 114}, {110, 122, 35}, },
            {{48, 122, -14}, },
            {{48, 90, -14}, {95, 95, 115}, {97, 122, 35}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 115, -28}, {116, 116, 116}, {117, 122, 35}, },
            {{48, 108, -110}, {109, 109, 117}, {110, 122, 35}, },
            {{48, 95, -14}, {97, 97, 118}, {98, 122, 35}, },
            {{48, 100, -25}, {101, 101, 119}, {102, 122, 35}, },
            {{48, 97, -73}, {98, 98, 120}, {99, 122, 35}, },
            {{48, 115, -28}, {116, 116, 121}, {117, 122, 35}, },
            {{48, 122, -14}, },
            {{48, 103, -20}, {104, 104, 122}, {105, 122, 35}, },
            {{48, 110, -19}, {111, 111, 123}, {112, 122, 35}, },
            {{48, 99, -64}, {100, 100, 124}, {101, 122, 35}, },
            {{48, 122, -14}, },
        }
        { // SL_COMMENT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 39, 1}, {40, 40, 7}, {41, 41, 8}, {42, 43, 1}, {44, 44, 9}, {45, 45, 1}, {46, 46, 10}, {47, 58, 1}, {59, 59, 11}, {60, 64, 1}, {65, 90, 12}, {91, 91, 13}, {92, 92, 1}, {93, 93, 14}, {94, 94, 1}, {95, 95, 15}, {96, 96, 1}, {97, 97, 16}, {98, 98, 17}, {99, 99, 18}, {100, 100, 16}, {101, 101, 19}, {102, 102, 20}, {103, 104, 16}, {105, 105, 21}, {106, 107, 16}, {108, 108, 22}, {109, 109, 23}, {110, 110, 24}, {111, 111, 16}, {112, 112, 25}, {113, 114, 16}, {115, 115, 26}, {116, 117, 16}, {118, 118, 27}, {119, 122, 16}, {123, 123, 28}, {124, 124, 1}, {125, 125, 29}, {126, 65535, 1}, },
            {{0, 9, 1}, {10, 10, 30}, {11, 12, 1}, {13, 13, 31}, {14, 65535, 1}, },
            {{0, 32, -2}, {33, 65535, 1}, },
            {{9, 9, 32}, {10, 10, 33}, {12, 12, 34}, {13, 13, 35}, {32, 32, 36}, },
            {{0, 65535, -4}, },
            {{9, 9, 32}, {10, 10, 37}, {12, 32, -5}, },
            {{0, 65535, -4}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 13, -3}, {14, 47, 1}, {48, 57, 38}, {58, 64, 1}, {65, 90, 39}, {91, 94, 1}, {95, 95, 40}, {96, 96, 1}, {97, 122, 41}, {123, 65535, 1}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 65535, -14}, },
            {{0, 65535, -14}, },
            {{0, 96, -14}, {97, 110, 41}, {111, 111, 42}, {112, 122, 41}, {123, 65535, 1}, },
            {{0, 96, -14}, {97, 103, 41}, {104, 104, 43}, {105, 107, 41}, {108, 108, 44}, {109, 122, 41}, {123, 65535, 1}, },
            {{0, 96, -14}, {97, 109, 41}, {110, 110, 45}, {111, 122, 41}, {123, 65535, 1}, },
            {{0, 96, -14}, {97, 107, 41}, {108, 108, 46}, {109, 65535, -20}, },
            {{0, 109, -21}, {110, 110, 47}, {111, 65535, -21}, },
            {{0, 110, -19}, {111, 111, 48}, {112, 65535, -19}, },
            {{0, 96, -14}, {97, 100, 41}, {101, 101, 49}, {102, 122, 41}, {123, 65535, 1}, },
            {{0, 100, -25}, {101, 101, 50}, {102, 65535, -25}, },
            {{0, 96, -14}, {97, 113, 41}, {114, 114, 51}, {115, 122, 41}, {123, 65535, 1}, },
            {{0, 96, -14}, {97, 115, 41}, {116, 116, 52}, {117, 122, 41}, {123, 65535, 1}, },
            {{0, 96, -14}, {97, 97, 53}, {98, 110, 41}, {111, 111, 54}, {112, 65535, -19}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {},
            {{10, 10, 55}, },
            {{9, 32, -5}, },
            {{9, 32, -5}, },
            {{9, 32, -5}, },
            {{9, 9, 32}, {10, 10, 56}, {12, 32, -5}, },
            {{9, 32, -5}, },
            {{9, 32, -5}, },
            {{0, 65535, -14}, },
            {{0, 65535, -14}, },
            {{0, 65535, -14}, },
            {{0, 65535, -14}, },
            {{0, 110, -19}, {111, 111, 57}, {112, 65535, -19}, },
            {{0, 96, -14}, {97, 97, 58}, {98, 122, 41}, {123, 65535, 1}, },
            {{0, 96, -14}, {97, 97, 59}, {98, 65535, -45}, },
            {{0, 96, -14}, {97, 98, 41}, {99, 99, 60}, {100, 100, 61}, {101, 122, 41}, {123, 65535, 1}, },
            {{0, 110, -19}, {111, 111, 62}, {112, 65535, -19}, },
            {{0, 115, -28}, {116, 116, 63}, {117, 65535, -28}, },
            {{0, 110, -19}, {111, 111, 64}, {112, 65535, -19}, },
            {{0, 115, -28}, {116, 116, 65}, {117, 65535, -28}, },
            {{0, 96, -14}, {97, 118, 41}, {119, 119, 66}, {120, 122, 41}, {123, 65535, 1}, },
            {{0, 96, -14}, {97, 104, 41}, {105, 105, 67}, {106, 122, 41}, {123, 65535, 1}, },
            {{0, 113, -27}, {114, 114, 68}, {115, 65535, -27}, },
            {{0, 113, -27}, {114, 114, 69}, {115, 65535, -27}, },
            {{0, 104, -53}, {105, 105, 70}, {106, 65535, -53}, },
            {},
            {{9, 32, -5}, },
            {{0, 107, -22}, {108, 108, 71}, {109, 65535, -20}, },
            {{0, 113, -27}, {114, 114, 72}, {115, 65535, -27}, },
            {{0, 96, -14}, {97, 114, 41}, {115, 115, 73}, {116, 122, 41}, {123, 65535, 1}, },
            {{0, 107, -22}, {108, 108, 74}, {109, 65535, -20}, },
            {{0, 94, -14}, {95, 95, 75}, {96, 65535, -14}, },
            {{0, 96, -14}, {97, 97, 76}, {98, 65535, -45}, },
            {{0, 65535, -14}, },
            {{0, 96, -14}, {97, 106, 41}, {107, 107, 77}, {108, 122, 41}, {123, 65535, 1}, },
            {{0, 103, -20}, {104, 104, 78}, {105, 122, 41}, {123, 65535, 1}, },
            {{0, 94, -14}, {95, 95, 79}, {96, 65535, -14}, },
            {{0, 109, -21}, {110, 110, 80}, {111, 65535, -21}, },
            {{0, 104, -53}, {105, 105, 81}, {106, 65535, -53}, },
            {{0, 104, -53}, {105, 105, 82}, {106, 65535, -53}, },
            {{0, 96, -14}, {97, 99, 41}, {100, 100, 83}, {101, 65535, -47}, },
            {{0, 65535, -14}, },
            {{0, 65535, -14}, },
            {{0, 114, -61}, {115, 115, 84}, {116, 65535, -61}, },
            {{0, 110, -19}, {111, 111, 85}, {112, 65535, -19}, },
            {{0, 114, -61}, {115, 115, 86}, {116, 65535, -61}, },
            {{0, 115, -28}, {116, 116, 87}, {117, 65535, -28}, },
            {{0, 96, -14}, {97, 116, 41}, {117, 117, 88}, {118, 122, 41}, {123, 65535, 1}, },
            {{0, 110, -19}, {111, 111, 89}, {112, 65535, -19}, },
            {{0, 96, -14}, {97, 97, 41}, {98, 98, 90}, {99, 114, 41}, {115, 115, 91}, {116, 65535, -61}, },
            {{0, 115, -28}, {116, 116, 92}, {117, 65535, -28}, },
            {{0, 109, -21}, {110, 110, 93}, {111, 65535, -21}, },
            {{0, 96, -14}, {97, 97, 94}, {98, 65535, -45}, },
            {{0, 65535, -14}, },
            {{0, 65535, -14}, },
            {{0, 114, -61}, {115, 115, 95}, {116, 65535, -61}, },
            {{0, 98, -47}, {99, 99, 96}, {100, 122, 41}, {123, 65535, 1}, },
            {{0, 65535, -14}, },
            {{0, 96, -14}, {97, 111, 41}, {112, 112, 97}, {113, 122, 41}, {123, 65535, 1}, },
            {{0, 99, -72}, {100, 100, 98}, {101, 65535, -47}, },
            {{0, 107, -22}, {108, 108, 99}, {109, 65535, -20}, },
            {{0, 98, -47}, {99, 99, 100}, {100, 65535, -88}, },
            {{0, 94, -14}, {95, 95, 101}, {96, 65535, -14}, },
            {{0, 96, -14}, {97, 102, 41}, {103, 103, 102}, {104, 122, 41}, {123, 65535, 1}, },
            {{0, 97, -81}, {98, 98, 103}, {99, 122, 41}, {123, 65535, 1}, },
            {{0, 104, -53}, {105, 105, 104}, {106, 65535, -53}, },
            {{0, 110, -19}, {111, 111, 105}, {112, 65535, -19}, },
            {{0, 47, -14}, {48, 48, 38}, {49, 49, 106}, {50, 50, 107}, {51, 57, 38}, {58, 65535, -14}, },
            {{0, 65535, -14}, },
            {{0, 110, -19}, {111, 111, 108}, {112, 65535, -19}, },
            {{0, 110, -19}, {111, 111, 109}, {112, 65535, -19}, },
            {{0, 114, -61}, {115, 115, 110}, {116, 65535, -61}, },
            {{0, 65535, -14}, },
            {{0, 107, -22}, {108, 108, 111}, {109, 65535, -20}, },
            {{0, 109, -21}, {110, 110, 112}, {111, 65535, -21}, },
            {{0, 111, -90}, {112, 112, 113}, {113, 65535, -90}, },
            {{0, 65535, -14}, },
            {{0, 65535, -14}, },
            {{0, 98, -47}, {99, 99, 114}, {100, 65535, -88}, },
            {{0, 111, -90}, {112, 112, 115}, {113, 65535, -90}, },
            {{0, 96, -14}, {97, 120, 41}, {121, 121, 116}, {122, 122, 41}, {123, 65535, 1}, },
            {{0, 100, -25}, {101, 101, 117}, {102, 65535, -25}, },
            {{0, 102, -95}, {103, 103, 118}, {104, 65535, -95}, },
            {{0, 100, -25}, {101, 101, 119}, {102, 65535, -25}, },
            {{0, 106, -66}, {107, 107, 120}, {108, 65535, -66}, },
            {{0, 100, -25}, {101, 101, 121}, {102, 65535, -25}, },
            {{0, 96, -14}, {97, 108, 41}, {109, 109, 122}, {110, 122, 41}, {123, 65535, 1}, },
            {{0, 65535, -14}, },
            {{0, 94, -14}, {95, 95, 123}, {96, 65535, -14}, },
            {{0, 65535, -14}, },
            {{0, 65535, -14}, },
            {{0, 65535, -14}, },
            {{0, 115, -28}, {116, 116, 124}, {117, 65535, -28}, },
            {{0, 108, -118}, {109, 109, 125}, {110, 65535, -118}, },
            {{0, 96, -14}, {97, 97, 126}, {98, 65535, -45}, },
            {{0, 100, -25}, {101, 101, 127}, {102, 65535, -25}, },
            {{0, 97, -81}, {98, 98, 128}, {99, 65535, -96}, },
            {{0, 115, -28}, {116, 116, 129}, {117, 65535, -28}, },
            {{0, 65535, -14}, },
            {{0, 103, -20}, {104, 104, 130}, {105, 65535, -67}, },
            {{0, 110, -19}, {111, 111, 131}, {112, 65535, -19}, },
            {{0, 99, -72}, {100, 100, 132}, {101, 65535, -47}, },
            {{0, 65535, -14}, },
        }
        { // ML_COMMENT
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {40, 40, 6}, {41, 41, 7}, {44, 44, 8}, {46, 46, 9}, {59, 59, 10}, {65, 90, 11}, {91, 91, 12}, {93, 93, 13}, {95, 95, 14}, {97, 97, 15}, {98, 98, 16}, {99, 99, 17}, {100, 100, 15}, {101, 101, 18}, {102, 102, 19}, {103, 104, 15}, {105, 105, 20}, {106, 107, 15}, {108, 108, 21}, {109, 109, 22}, {110, 110, 23}, {111, 111, 15}, {112, 112, 24}, {113, 114, 15}, {115, 115, 25}, {116, 117, 15}, {118, 118, 26}, {119, 122, 15}, {123, 123, 27}, {125, 125, 28}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 29}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 30}, {65, 90, 31}, {95, 95, 32}, {97, 122, 33}, },
            {},
            {},
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 95, -13}, {97, 110, 33}, {111, 111, 34}, {112, 122, 33}, },
            {{48, 95, -13}, {97, 103, 33}, {104, 104, 35}, {105, 107, 33}, {108, 108, 36}, {109, 122, 33}, },
            {{48, 95, -13}, {97, 109, 33}, {110, 110, 37}, {111, 122, 33}, },
            {{48, 95, -13}, {97, 107, 33}, {108, 108, 38}, {109, 122, 33}, },
            {{48, 109, -20}, {110, 110, 39}, {111, 122, 33}, },
            {{48, 110, -18}, {111, 111, 40}, {112, 122, 33}, },
            {{48, 95, -13}, {97, 100, 33}, {101, 101, 41}, {102, 122, 33}, },
            {{48, 100, -24}, {101, 101, 42}, {102, 122, 33}, },
            {{48, 95, -13}, {97, 113, 33}, {114, 114, 43}, {115, 122, 33}, },
            {{48, 95, -13}, {97, 115, 33}, {116, 116, 44}, {117, 122, 33}, },
            {{48, 95, -13}, {97, 97, 45}, {98, 110, 33}, {111, 111, 46}, {112, 122, 33}, },
            {},
            {},
            {{9, 32, -2}, },
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 110, -18}, {111, 111, 47}, {112, 122, 33}, },
            {{48, 95, -13}, {97, 97, 48}, {98, 122, 33}, },
            {{48, 95, -13}, {97, 97, 49}, {98, 122, 33}, },
            {{48, 95, -13}, {97, 98, 33}, {99, 99, 50}, {100, 100, 51}, {101, 122, 33}, },
            {{48, 110, -18}, {111, 111, 52}, {112, 122, 33}, },
            {{48, 115, -27}, {116, 116, 53}, {117, 122, 33}, },
            {{48, 110, -18}, {111, 111, 54}, {112, 122, 33}, },
            {{48, 115, -27}, {116, 116, 55}, {117, 122, 33}, },
            {{48, 95, -13}, {97, 118, 33}, {119, 119, 56}, {120, 122, 33}, },
            {{48, 95, -13}, {97, 104, 33}, {105, 105, 57}, {106, 122, 33}, },
            {{48, 113, -26}, {114, 114, 58}, {115, 122, 33}, },
            {{48, 113, -26}, {114, 114, 59}, {115, 122, 33}, },
            {{48, 104, -45}, {105, 105, 60}, {106, 122, 33}, },
            {{48, 107, -21}, {108, 108, 61}, {109, 122, 33}, },
            {{48, 113, -26}, {114, 114, 62}, {115, 122, 33}, },
            {{48, 95, -13}, {97, 114, 33}, {115, 115, 63}, {116, 122, 33}, },
            {{48, 107, -21}, {108, 108, 64}, {109, 122, 33}, },
            {{48, 90, -13}, {95, 95, 65}, {97, 122, 33}, },
            {{48, 95, -13}, {97, 97, 66}, {98, 122, 33}, },
            {{48, 122, -13}, },
            {{48, 95, -13}, {97, 106, 33}, {107, 107, 67}, {108, 122, 33}, },
            {{48, 103, -19}, {104, 104, 68}, {105, 122, 33}, },
            {{48, 90, -13}, {95, 95, 69}, {97, 122, 33}, },
            {{48, 109, -20}, {110, 110, 70}, {111, 122, 33}, },
            {{48, 104, -45}, {105, 105, 71}, {106, 122, 33}, },
            {{48, 104, -45}, {105, 105, 72}, {106, 122, 33}, },
            {{48, 95, -13}, {97, 99, 33}, {100, 100, 73}, {101, 122, 33}, },
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 114, -51}, {115, 115, 74}, {116, 122, 33}, },
            {{48, 110, -18}, {111, 111, 75}, {112, 122, 33}, },
            {{48, 114, -51}, {115, 115, 76}, {116, 122, 33}, },
            {{48, 115, -27}, {116, 116, 77}, {117, 122, 33}, },
            {{48, 95, -13}, {97, 116, 33}, {117, 117, 78}, {118, 122, 33}, },
            {{48, 110, -18}, {111, 111, 79}, {112, 122, 33}, },
            {{48, 95, -13}, {97, 97, 33}, {98, 98, 80}, {99, 114, 33}, {115, 115, 81}, {116, 122, 33}, },
            {{48, 115, -27}, {116, 116, 82}, {117, 122, 33}, },
            {{48, 109, -20}, {110, 110, 83}, {111, 122, 33}, },
            {{48, 95, -13}, {97, 97, 84}, {98, 122, 33}, },
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 114, -51}, {115, 115, 85}, {116, 122, 33}, },
            {{48, 98, -39}, {99, 99, 86}, {100, 122, 33}, },
            {{48, 122, -13}, },
            {{48, 95, -13}, {97, 111, 33}, {112, 112, 87}, {113, 122, 33}, },
            {{48, 99, -62}, {100, 100, 88}, {101, 122, 33}, },
            {{48, 107, -21}, {108, 108, 89}, {109, 122, 33}, },
            {{48, 98, -39}, {99, 99, 90}, {100, 122, 33}, },
            {{48, 90, -13}, {95, 95, 91}, {97, 122, 33}, },
            {{48, 95, -13}, {97, 102, 33}, {103, 103, 92}, {104, 122, 33}, },
            {{48, 97, -71}, {98, 98, 93}, {99, 122, 33}, },
            {{48, 104, -45}, {105, 105, 94}, {106, 122, 33}, },
            {{48, 110, -18}, {111, 111, 95}, {112, 122, 33}, },
            {{48, 48, 30}, {49, 49, 96}, {50, 50, 97}, {51, 57, 30}, {65, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 110, -18}, {111, 111, 98}, {112, 122, 33}, },
            {{48, 110, -18}, {111, 111, 99}, {112, 122, 33}, },
            {{48, 114, -51}, {115, 115, 100}, {116, 122, 33}, },
            {{48, 122, -13}, },
            {{48, 107, -21}, {108, 108, 101}, {109, 122, 33}, },
            {{48, 109, -20}, {110, 110, 102}, {111, 122, 33}, },
            {{48, 111, -80}, {112, 112, 103}, {113, 122, 33}, },
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 98, -39}, {99, 99, 104}, {100, 122, 33}, },
            {{48, 111, -80}, {112, 112, 105}, {113, 122, 33}, },
            {{48, 95, -13}, {97, 120, 33}, {121, 121, 106}, {122, 122, 33}, },
            {{48, 100, -24}, {101, 101, 107}, {102, 122, 33}, },
            {{48, 102, -85}, {103, 103, 108}, {104, 122, 33}, },
            {{48, 100, -24}, {101, 101, 109}, {102, 122, 33}, },
            {{48, 106, -56}, {107, 107, 110}, {108, 122, 33}, },
            {{48, 100, -24}, {101, 101, 111}, {102, 122, 33}, },
            {{48, 95, -13}, {97, 108, 33}, {109, 109, 112}, {110, 122, 33}, },
            {{48, 122, -13}, },
            {{48, 90, -13}, {95, 95, 113}, {97, 122, 33}, },
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {{48, 115, -27}, {116, 116, 114}, {117, 122, 33}, },
            {{48, 108, -108}, {109, 109, 115}, {110, 122, 33}, },
            {{48, 95, -13}, {97, 97, 116}, {98, 122, 33}, },
            {{48, 100, -24}, {101, 101, 117}, {102, 122, 33}, },
            {{48, 97, -71}, {98, 98, 118}, {99, 122, 33}, },
            {{48, 115, -27}, {116, 116, 119}, {117, 122, 33}, },
            {{48, 122, -13}, },
            {{48, 103, -19}, {104, 104, 120}, {105, 122, 33}, },
            {{48, 110, -18}, {111, 111, 121}, {112, 122, 33}, },
            {{48, 99, -62}, {100, 100, 122}, {101, 122, 33}, },
            {{48, 122, -13}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // NORMAL
        {0, 0, 0, 0, 0, 0, 5, 6, 4, 11, -1, 3, 28, 7, 8, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 9, 10, 0, 1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 19, 28, 28, 28, 28, 28, 28, 28, 16, 17, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 20, 22, 28, 28, 18, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 23, 28, 28, 28, 21, 28, 28, 28, 14, 15, 28, 28, 28, 28, 28, 28, 28, 28, 28, 24, 28, 13, 25, 12, 28, 28, 28, 28, 28, 28, 27, 28, 28, 28, 26, },
        // SL_COMMENT
        {0, -1, 0, 0, 0, 0, 0, 5, 6, 4, 11, 3, 28, 7, 8, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 9, 10, 2, 2, 0, 0, 0, 0, 0, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 2, 0, 28, 28, 28, 28, 28, 28, 19, 28, 28, 28, 28, 28, 28, 28, 16, 17, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 20, 22, 28, 28, 18, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 23, 28, 28, 28, 21, 28, 28, 28, 14, 15, 28, 28, 28, 28, 28, 28, 28, 28, 28, 24, 28, 13, 25, 12, 28, 28, 28, 28, 28, 28, 27, 28, 28, 28, 26, },
        // ML_COMMENT
        {0, 0, 0, 0, 0, 0, 5, 6, 4, 11, 3, 28, 7, 8, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 9, 10, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 19, 28, 28, 28, 28, 28, 28, 28, 16, 17, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 20, 22, 28, 28, 18, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 23, 28, 28, 28, 21, 28, 28, 28, 14, 15, 28, 28, 28, 28, 28, 28, 28, 28, 28, 24, 28, 13, 25, 12, 28, 28, 28, 28, 28, 28, 27, 28, 28, 28, 26, },

    };*/

    public static class State
    {
        public final static State NORMAL = new State(0);
        public final static State SL_COMMENT = new State(1);
        public final static State ML_COMMENT = new State(2);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
