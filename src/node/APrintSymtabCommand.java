/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class APrintSymtabCommand extends PCommand
{
    private TPrintSymtab _printSymtab_;
    private TSemicolon _semicolon_;

    public APrintSymtabCommand()
    {
        // Constructor
    }

    public APrintSymtabCommand(
        @SuppressWarnings("hiding") TPrintSymtab _printSymtab_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setPrintSymtab(_printSymtab_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new APrintSymtabCommand(
            cloneNode(this._printSymtab_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrintSymtabCommand(this);
    }

    public TPrintSymtab getPrintSymtab()
    {
        return this._printSymtab_;
    }

    public void setPrintSymtab(TPrintSymtab node)
    {
        if(this._printSymtab_ != null)
        {
            this._printSymtab_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._printSymtab_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._printSymtab_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._printSymtab_ == child)
        {
            this._printSymtab_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._printSymtab_ == oldChild)
        {
            setPrintSymtab((TPrintSymtab) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
