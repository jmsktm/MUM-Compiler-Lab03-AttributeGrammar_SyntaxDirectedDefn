/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AProcDeclCommand extends PCommand
{
    private TMethod _method_;
    private PMethodHdr _methodHdr_;
    private PFormalList _formalList_;
    private TRParen _rParen_;
    private TSemicolon _semicolon_;

    public AProcDeclCommand()
    {
        // Constructor
    }

    public AProcDeclCommand(
        @SuppressWarnings("hiding") TMethod _method_,
        @SuppressWarnings("hiding") PMethodHdr _methodHdr_,
        @SuppressWarnings("hiding") PFormalList _formalList_,
        @SuppressWarnings("hiding") TRParen _rParen_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setMethod(_method_);

        setMethodHdr(_methodHdr_);

        setFormalList(_formalList_);

        setRParen(_rParen_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AProcDeclCommand(
            cloneNode(this._method_),
            cloneNode(this._methodHdr_),
            cloneNode(this._formalList_),
            cloneNode(this._rParen_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProcDeclCommand(this);
    }

    public TMethod getMethod()
    {
        return this._method_;
    }

    public void setMethod(TMethod node)
    {
        if(this._method_ != null)
        {
            this._method_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._method_ = node;
    }

    public PMethodHdr getMethodHdr()
    {
        return this._methodHdr_;
    }

    public void setMethodHdr(PMethodHdr node)
    {
        if(this._methodHdr_ != null)
        {
            this._methodHdr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodHdr_ = node;
    }

    public PFormalList getFormalList()
    {
        return this._formalList_;
    }

    public void setFormalList(PFormalList node)
    {
        if(this._formalList_ != null)
        {
            this._formalList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formalList_ = node;
    }

    public TRParen getRParen()
    {
        return this._rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(this._rParen_ != null)
        {
            this._rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParen_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._method_)
            + toString(this._methodHdr_)
            + toString(this._formalList_)
            + toString(this._rParen_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._method_ == child)
        {
            this._method_ = null;
            return;
        }

        if(this._methodHdr_ == child)
        {
            this._methodHdr_ = null;
            return;
        }

        if(this._formalList_ == child)
        {
            this._formalList_ = null;
            return;
        }

        if(this._rParen_ == child)
        {
            this._rParen_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._method_ == oldChild)
        {
            setMethod((TMethod) newChild);
            return;
        }

        if(this._methodHdr_ == oldChild)
        {
            setMethodHdr((PMethodHdr) newChild);
            return;
        }

        if(this._formalList_ == oldChild)
        {
            setFormalList((PFormalList) newChild);
            return;
        }

        if(this._rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
