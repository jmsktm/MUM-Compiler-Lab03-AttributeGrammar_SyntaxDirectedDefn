/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PGoal node1 = (PGoal) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AGoal */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAclasscommand1Command */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AAclasscommand2Command */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAprocdeclcommand1Command */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAprocdeclcommand2Command */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AAprocdeclcommand3Command */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AAprocdeclcommand4Command */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce AAvariablecommand1Command */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce AAvariablecommand2Command */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list, false);
            }
            break;
            case 11: /* reduce AAlookup1command1Command */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list, false);
            }
            break;
            case 12: /* reduce AAlookup1command2Command */
            {
                ArrayList<Object> list = new12();
                push(goTo(2), list, false);
            }
            break;
            case 13: /* reduce AAlookup2command1Command */
            {
                ArrayList<Object> list = new13();
                push(goTo(2), list, false);
            }
            break;
            case 14: /* reduce AAlookup2command2Command */
            {
                ArrayList<Object> list = new14();
                push(goTo(2), list, false);
            }
            break;
            case 15: /* reduce AAnewscopecommand1Command */
            {
                ArrayList<Object> list = new15();
                push(goTo(2), list, false);
            }
            break;
            case 16: /* reduce AAnewscopecommand2Command */
            {
                ArrayList<Object> list = new16();
                push(goTo(2), list, false);
            }
            break;
            case 17: /* reduce AAendscopecommand1Command */
            {
                ArrayList<Object> list = new17();
                push(goTo(2), list, false);
            }
            break;
            case 18: /* reduce AAendscopecommand2Command */
            {
                ArrayList<Object> list = new18();
                push(goTo(2), list, false);
            }
            break;
            case 19: /* reduce AAmethodscopecommand1Command */
            {
                ArrayList<Object> list = new19();
                push(goTo(2), list, false);
            }
            break;
            case 20: /* reduce AAmethodscopecommand2Command */
            {
                ArrayList<Object> list = new20();
                push(goTo(2), list, false);
            }
            break;
            case 21: /* reduce AAnewblockcommand1Command */
            {
                ArrayList<Object> list = new21();
                push(goTo(2), list, false);
            }
            break;
            case 22: /* reduce AAnewblockcommand2Command */
            {
                ArrayList<Object> list = new22();
                push(goTo(2), list, false);
            }
            break;
            case 23: /* reduce AAprintsymtabcommand1Command */
            {
                ArrayList<Object> list = new23();
                push(goTo(2), list, false);
            }
            break;
            case 24: /* reduce AAprintsymtabcommand2Command */
            {
                ArrayList<Object> list = new24();
                push(goTo(2), list, false);
            }
            break;
            case 25: /* reduce AMethodHdr */
            {
                ArrayList<Object> list = new25();
                push(goTo(3), list, false);
            }
            break;
            case 26: /* reduce AIntType */
            {
                ArrayList<Object> list = new26();
                push(goTo(4), list, false);
            }
            break;
            case 27: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new27();
                push(goTo(4), list, false);
            }
            break;
            case 28: /* reduce ACharType */
            {
                ArrayList<Object> list = new28();
                push(goTo(4), list, false);
            }
            break;
            case 29: /* reduce AStringType */
            {
                ArrayList<Object> list = new29();
                push(goTo(4), list, false);
            }
            break;
            case 30: /* reduce AVoidType */
            {
                ArrayList<Object> list = new30();
                push(goTo(4), list, false);
            }
            break;
            case 31: /* reduce AFloatType */
            {
                ArrayList<Object> list = new31();
                push(goTo(4), list, false);
            }
            break;
            case 32: /* reduce AFormalList */
            {
                ArrayList<Object> list = new32();
                push(goTo(5), list, false);
            }
            break;
            case 33: /* reduce AMultipleFormalList */
            {
                ArrayList<Object> list = new33();
                push(goTo(5), list, false);
            }
            break;
            case 34: /* reduce AFormal */
            {
                ArrayList<Object> list = new34();
                push(goTo(6), list, false);
            }
            break;
            case 35: /* reduce AArrayFormal */
            {
                ArrayList<Object> list = new35();
                push(goTo(6), list, false);
            }
            break;
            case 36: /* reduce ATerminal$Command */
            {
                ArrayList<Object> list = new36();
                push(goTo(7), list, true);
            }
            break;
            case 37: /* reduce ANonTerminal$Command */
            {
                ArrayList<Object> list = new37();
                push(goTo(7), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AGoal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGoal pgoalNode1;
        {
            // Block
        PProgram pprogramNode2;
        pprogramNode2 = (PProgram)nodeArrayList1.get(0);

        pgoalNode1 = new AGoal(pprogramNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAclasscommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TKclass tkclassNode2;
        TIdent tidentNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tkclassNode2 = (TKclass)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);

        pcommandNode1 = new AClassCommand(tkclassNode2, tidentNode3, null);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAclasscommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TKclass tkclassNode2;
        TIdent tidentNode3;
        TSemicolon tsemicolonNode4;
        tkclassNode2 = (TKclass)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pcommandNode1 = new AClassCommand(tkclassNode2, tidentNode3, tsemicolonNode4);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAprocdeclcommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TMethod tmethodNode2;
        PMethodHdr pmethodhdrNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRParen trparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        tmethodNode2 = (TMethod)nodeArrayList1.get(0);
        pmethodhdrNode3 = (PMethodHdr)nodeArrayList2.get(0);
        trparenNode5 = (TRParen)nodeArrayList3.get(0);

        pcommandNode1 = new AProcDeclCommand(tmethodNode2, pmethodhdrNode3, null, trparenNode5, null);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAprocdeclcommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TMethod tmethodNode2;
        PMethodHdr pmethodhdrNode3;
        PFormalList pformallistNode4;
        TRParen trparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        tmethodNode2 = (TMethod)nodeArrayList1.get(0);
        pmethodhdrNode3 = (PMethodHdr)nodeArrayList2.get(0);
        pformallistNode4 = (PFormalList)nodeArrayList3.get(0);
        trparenNode5 = (TRParen)nodeArrayList4.get(0);

        pcommandNode1 = new AProcDeclCommand(tmethodNode2, pmethodhdrNode3, pformallistNode4, trparenNode5, null);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAprocdeclcommand3Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TMethod tmethodNode2;
        PMethodHdr pmethodhdrNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRParen trparenNode5;
        TSemicolon tsemicolonNode6;
        tmethodNode2 = (TMethod)nodeArrayList1.get(0);
        pmethodhdrNode3 = (PMethodHdr)nodeArrayList2.get(0);
        trparenNode5 = (TRParen)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pcommandNode1 = new AProcDeclCommand(tmethodNode2, pmethodhdrNode3, null, trparenNode5, tsemicolonNode6);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAprocdeclcommand4Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TMethod tmethodNode2;
        PMethodHdr pmethodhdrNode3;
        PFormalList pformallistNode4;
        TRParen trparenNode5;
        TSemicolon tsemicolonNode6;
        tmethodNode2 = (TMethod)nodeArrayList1.get(0);
        pmethodhdrNode3 = (PMethodHdr)nodeArrayList2.get(0);
        pformallistNode4 = (PFormalList)nodeArrayList3.get(0);
        trparenNode5 = (TRParen)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pcommandNode1 = new AProcDeclCommand(tmethodNode2, pmethodhdrNode3, pformallistNode4, trparenNode5, tsemicolonNode6);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAvariablecommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TVariable tvariableNode2;
        PType ptypeNode3;
        TIdent tidentNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        tvariableNode2 = (TVariable)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidentNode4 = (TIdent)nodeArrayList3.get(0);

        pcommandNode1 = new AVariableCommand(tvariableNode2, ptypeNode3, tidentNode4, null);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAvariablecommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TVariable tvariableNode2;
        PType ptypeNode3;
        TIdent tidentNode4;
        TSemicolon tsemicolonNode5;
        tvariableNode2 = (TVariable)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidentNode4 = (TIdent)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pcommandNode1 = new AVariableCommand(tvariableNode2, ptypeNode3, tidentNode4, tsemicolonNode5);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAlookup1command1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TLookup1 tlookup1Node2;
        TIdent tidentNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tlookup1Node2 = (TLookup1)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);

        pcommandNode1 = new ALookup1Command(tlookup1Node2, tidentNode3, null);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAlookup1command2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TLookup1 tlookup1Node2;
        TIdent tidentNode3;
        TSemicolon tsemicolonNode4;
        tlookup1Node2 = (TLookup1)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pcommandNode1 = new ALookup1Command(tlookup1Node2, tidentNode3, tsemicolonNode4);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAlookup2command1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TLookup2 tlookup2Node2;
        TIdent tidentNode3;
        TDot tdotNode4;
        TIdent tidentNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        tlookup2Node2 = (TLookup2)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tdotNode4 = (TDot)nodeArrayList3.get(0);
        tidentNode5 = (TIdent)nodeArrayList4.get(0);

        pcommandNode1 = new ALookup2Command(tlookup2Node2, tidentNode3, tdotNode4, tidentNode5, null);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAlookup2command2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TLookup2 tlookup2Node2;
        TIdent tidentNode3;
        TDot tdotNode4;
        TIdent tidentNode5;
        TSemicolon tsemicolonNode6;
        tlookup2Node2 = (TLookup2)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tdotNode4 = (TDot)nodeArrayList3.get(0);
        tidentNode5 = (TIdent)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pcommandNode1 = new ALookup2Command(tlookup2Node2, tidentNode3, tdotNode4, tidentNode5, tsemicolonNode6);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAnewscopecommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TNewScope tnewscopeNode2;
        TIdent tidentNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tnewscopeNode2 = (TNewScope)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);

        pcommandNode1 = new ANewScopeCommand(tnewscopeNode2, tidentNode3, null);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAnewscopecommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TNewScope tnewscopeNode2;
        TIdent tidentNode3;
        TSemicolon tsemicolonNode4;
        tnewscopeNode2 = (TNewScope)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pcommandNode1 = new ANewScopeCommand(tnewscopeNode2, tidentNode3, tsemicolonNode4);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAendscopecommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TEndScope tendscopeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tendscopeNode2 = (TEndScope)nodeArrayList1.get(0);

        pcommandNode1 = new AEndScopeCommand(tendscopeNode2, null);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAendscopecommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TEndScope tendscopeNode2;
        TSemicolon tsemicolonNode3;
        tendscopeNode2 = (TEndScope)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pcommandNode1 = new AEndScopeCommand(tendscopeNode2, tsemicolonNode3);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAmethodscopecommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TEnclosingMethod tenclosingmethodNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tenclosingmethodNode2 = (TEnclosingMethod)nodeArrayList1.get(0);

        pcommandNode1 = new AMethodScopeCommand(tenclosingmethodNode2, null);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAmethodscopecommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TEnclosingMethod tenclosingmethodNode2;
        TSemicolon tsemicolonNode3;
        tenclosingmethodNode2 = (TEnclosingMethod)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pcommandNode1 = new AMethodScopeCommand(tenclosingmethodNode2, tsemicolonNode3);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAnewblockcommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TNewBlock tnewblockNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tnewblockNode2 = (TNewBlock)nodeArrayList1.get(0);

        pcommandNode1 = new ANewBlockCommand(tnewblockNode2, null);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAnewblockcommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TNewBlock tnewblockNode2;
        TSemicolon tsemicolonNode3;
        tnewblockNode2 = (TNewBlock)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pcommandNode1 = new ANewBlockCommand(tnewblockNode2, tsemicolonNode3);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAprintsymtabcommand1Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TPrintSymtab tprintsymtabNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tprintsymtabNode2 = (TPrintSymtab)nodeArrayList1.get(0);

        pcommandNode1 = new APrintSymtabCommand(tprintsymtabNode2, null);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAprintsymtabcommand2Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TPrintSymtab tprintsymtabNode2;
        TSemicolon tsemicolonNode3;
        tprintsymtabNode2 = (TPrintSymtab)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pcommandNode1 = new APrintSymtabCommand(tprintsymtabNode2, tsemicolonNode3);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AMethodHdr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHdr pmethodhdrNode1;
        {
            // Block
        PType ptypeNode2;
        TIdent tidentNode3;
        TLParen tlparenNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tlparenNode4 = (TLParen)nodeArrayList3.get(0);

        pmethodhdrNode1 = new AMethodHdr(ptypeNode2, tidentNode3, tlparenNode4);
        }
	nodeList.add(pmethodhdrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACharType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        ptypeNode1 = new ACharType(tcharNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AVoidType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        ptypeNode1 = new AVoidType(tvoidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AFloatType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        ptypeNode1 = new AFloatType(tfloatNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AFormalList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormalList pformallistNode1;
        {
            // Block
        PFormal pformalNode2;
        pformalNode2 = (PFormal)nodeArrayList1.get(0);

        pformallistNode1 = new AFormalList(pformalNode2);
        }
	nodeList.add(pformallistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMultipleFormalList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormalList pformallistNode1;
        {
            // Block
        PFormalList pformallistNode2;
        TComma tcommaNode3;
        PFormal pformalNode4;
        pformallistNode2 = (PFormalList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pformalNode4 = (PFormal)nodeArrayList3.get(0);

        pformallistNode1 = new AMultipleFormalList(pformallistNode2, tcommaNode3, pformalNode4);
        }
	nodeList.add(pformallistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AFormal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormal pformalNode1;
        {
            // Block
        PType ptypeNode2;
        TIdent tidentNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);

        pformalNode1 = new AFormal(ptypeNode2, tidentNode3);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AArrayFormal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormal pformalNode1;
        {
            // Block
        PType ptypeNode2;
        TIdent tidentNode3;
        TLBrack tlbrackNode4;
        TRBrack trbrackNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tlbrackNode4 = (TLBrack)nodeArrayList3.get(0);
        trbrackNode5 = (TRBrack)nodeArrayList4.get(0);

        pformalNode1 = new AArrayFormal(ptypeNode2, tidentNode3, tlbrackNode4, trbrackNode5);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ATerminal$Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommand pcommandNode1;
        pcommandNode1 = (PCommand)nodeArrayList1.get(0);
	if(pcommandNode1 != null)
	{
	  listNode2.add(pcommandNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ANonTerminal$Command */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommand pcommandNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommandNode2 = (PCommand)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommandNode2 != null)
	{
	  listNode3.add(pcommandNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 1}, {9, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {12, SHIFT, 4}, {19, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, ERROR, 1}, {25, SHIFT, 15}, },
			{{-1, REDUCE, 17}, {0, SHIFT, 16}, },
			{{-1, ERROR, 3}, {25, SHIFT, 17}, },
			{{-1, ERROR, 4}, {25, SHIFT, 18}, },
			{{-1, ERROR, 5}, {25, SHIFT, 19}, },
			{{-1, ERROR, 6}, {13, SHIFT, 20}, {14, SHIFT, 21}, {15, SHIFT, 22}, {16, SHIFT, 23}, {17, SHIFT, 24}, {18, SHIFT, 25}, },
			{{-1, ERROR, 7}, {13, SHIFT, 20}, {14, SHIFT, 21}, {15, SHIFT, 22}, {16, SHIFT, 23}, {17, SHIFT, 24}, {18, SHIFT, 25}, },
			{{-1, REDUCE, 21}, {0, SHIFT, 29}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 30}, },
			{{-1, REDUCE, 23}, {0, SHIFT, 31}, },
			{{-1, ERROR, 11}, {26, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 2}, {9, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {12, SHIFT, 4}, {19, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 10}, },
			{{-1, REDUCE, 15}, {0, SHIFT, 33}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 11}, {0, SHIFT, 34}, },
			{{-1, ERROR, 18}, {8, SHIFT, 35}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 36}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 26}, {3, SHIFT, 37}, {13, SHIFT, 20}, {14, SHIFT, 21}, {15, SHIFT, 22}, {16, SHIFT, 23}, {17, SHIFT, 24}, {18, SHIFT, 25}, },
			{{-1, ERROR, 27}, {25, SHIFT, 41}, },
			{{-1, ERROR, 28}, {25, SHIFT, 42}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 35}, {25, SHIFT, 43}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, {0, SHIFT, 44}, },
			{{-1, ERROR, 38}, {25, SHIFT, 45}, },
			{{-1, ERROR, 39}, {1, SHIFT, 46}, {3, SHIFT, 47}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 41}, {2, SHIFT, 48}, },
			{{-1, REDUCE, 9}, {0, SHIFT, 49}, },
			{{-1, REDUCE, 13}, {0, SHIFT, 50}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 34}, {4, SHIFT, 51}, },
			{{-1, ERROR, 46}, {13, SHIFT, 20}, {14, SHIFT, 21}, {15, SHIFT, 22}, {16, SHIFT, 23}, {17, SHIFT, 24}, {18, SHIFT, 25}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 53}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 51}, {5, SHIFT, 54}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 35}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 11}, },
			{{-1, 12}, },
			{{-1, 13}, {14, 32}, },
			{{-1, 26}, },
			{{-1, 38}, {6, 27}, {7, 28}, },
			{{-1, 39}, },
			{{-1, 40}, {46, 52}, },
			{{-1, 14}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'new_scope', 'end_scope', 'lookup1', 'lookup2', 'class', 'method', 'variable', 'new_block', 'enclosing_method', 'print_symtab', EOF",
			"expecting: ident",
			"expecting: ';', 'new_scope', 'end_scope', 'lookup1', 'lookup2', 'class', 'method', 'variable', 'new_block', 'enclosing_method', 'print_symtab', EOF",
			"expecting: 'bool', 'char', 'float', 'int', 'void', 'string'",
			"expecting: EOF",
			"expecting: '.'",
			"expecting: ')', 'bool', 'char', 'float', 'int', 'void', 'string'",
			"expecting: ',', ')'",
			"expecting: '('",
			"expecting: ',', ')', '['",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 1, 1, 1, 3, 3, 2, 2, 2, 4, 4, 0, 0, 2, 0, 2, 5, 2, 1, 1, 1, 1, 1, 1, 6, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 7, 7, 8, 2, 2, 0, 9, 3, 2, 6, 0, 0, 10, 7, 0, 7, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
